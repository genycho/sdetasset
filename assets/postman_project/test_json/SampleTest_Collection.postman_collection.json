{
	"info": {
		"name": "SampleTest_Collection",
		"_postman_id": "b8281f0b-fec4-f741-5ff1-d23501ac949c",
		"description": "Naver SearchAPI Collection 입니다. \n. 명세 설명 : https://developers.naver.com/docs/search/movie/ \n. BASE URL(JSON) : https://openapi.naver.com/v1/search/movie.json\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "NaverMovieSearch",
			"description": "네이버 검색 API 중 영화검색 카테고리에 대한 테스트 구성입니다 ",
			"item": [
				{
					"name": "SearchAPITestSuite",
					"description": "영화 검색 API를 테스트하기 위한 묶음 폴더 ",
					"item": [
						{
							"name": "MovieSearchTest_200ok_01",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99ea04f3-9bdb-4bb6-8b72-a39d17755507",
										"type": "text/javascript",
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;",
											"",
											"var responseJSON;",
											"",
											"try { ",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests['response is valid JSON'] = true;",
											"}",
											"catch (e) { ",
											"    responseJSON = {}; ",
											"    tests['response is valid JSON'] = false;",
											"}",
											"",
											"tests['response json contains notExistElement'] = _.has(responseJSON, 'notExistElement');",
											"tests['response json contains total'] = _.has(responseJSON, 'total');",
											"tests['response json contains start'] = _.has(responseJSON, 'start');",
											"tests['response json contains display'] = _.has(responseJSON, 'display');",
											"tests['response json contains items'] = _.has(responseJSON, 'items');",
											"",
											"tests[\"start default value is 1\"] = responseJSON.start === 1;",
											"tests[\"display default value is 10\"] = responseJSON.display === 10;",
											"//tests['args key contains argument passed as url parameter'] = ('test' in responseJSON.args);",
											"//tests['args passed via request url params has value \"123\"'] = (_.get(responseJSON, 'args.test') === //\"123\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Naver-Client-Id",
										"value": "FCIvOj8oZxPv0fb4Aayy"
									},
									{
										"key": "X-Naver-Client-Secret",
										"value": "u_d9PF1mLV"
									}
								],
								"body": {},
								"url": {
									"raw": "https://openapi.naver.com/v1/search/movie.json?query=terminator",
									"protocol": "https",
									"host": [
										"openapi",
										"naver",
										"com"
									],
									"path": [
										"v1",
										"search",
										"movie.json"
									],
									"query": [
										{
											"key": "query",
											"value": "terminator",
											"equals": true,
											"description": "검색을 원하는 질의. UTF-8 인코딩이다"
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "MovieSearchTest_200ok_02",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88458ffd-191b-44c5-8a37-6710a3aed242",
										"type": "text/javascript",
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;",
											"",
											"var responseJSON;",
											"",
											"try { ",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests['response is valid JSON'] = true;",
											"}",
											"catch (e) { ",
											"    responseJSON = {}; ",
											"    tests['response is valid JSON'] = false;",
											"}",
											"",
											"tests['response json contains total'] = _.has(responseJSON, 'total');",
											"tests['response json contains start'] = _.has(responseJSON, 'start');",
											"tests['response json contains display'] = _.has(responseJSON, 'display');",
											"tests['response json contains items'] = _.has(responseJSON, 'items');",
											"",
											"//tests[\"start value is not 1\"] = responseJSON.start !== 1;",
											"tests[\"display value is not 10\"] = responseJSON.display !== 10;",
											"//tests['args key contains argument passed as url parameter'] = ('test' in responseJSON.args);",
											"//tests['args passed via request url params has value \"123\"'] = (_.get(responseJSON, 'args.test') === //\"123\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Naver-Client-Id",
										"value": "FCIvOj8oZxPv0fb4Aayy"
									},
									{
										"key": "X-Naver-Client-Secret",
										"value": "u_d9PF1mLV"
									}
								],
								"body": {},
								"url": {
									"raw": "https://openapi.naver.com/v1/search/movie.json?query=terminator&display=5&start=1&genre=18&country=US&yearfrom=1990&yearto=2020",
									"protocol": "https",
									"host": [
										"openapi",
										"naver",
										"com"
									],
									"path": [
										"v1",
										"search",
										"movie.json"
									],
									"query": [
										{
											"key": "query",
											"value": "terminator",
											"equals": true,
											"description": "검색을 원하는 질의. UTF-8 인코딩이다"
										},
										{
											"key": "display",
											"value": "5",
											"equals": true,
											"description": "검색 결과 출력 건수를 지정한다. 최대 100까지 가능하다"
										},
										{
											"key": "start",
											"value": "1",
											"equals": true,
											"description": "검색의 시작 위치를 지정할 수 있다. 최대 1000까지 가능하다."
										},
										{
											"key": "genre",
											"value": "18",
											"equals": true,
											"description": "1: 드라마 2: 판타지\n3: 서부 4: 공포\n5: 로맨스 6: 모험\n7: 스릴러 8: 느와르\n9: 컬트 10: 다큐멘터리\n11: 코미디 12: 가족\n13: 미스터리 14: 전쟁\n15: 애니메이션 16: 범죄\n17: 뮤지컬 18: SF\n19: 액션20: 무협\n21: 에로 22: 서스펜스\n23: 서사 24: 블랙코미디\n25: 실험 26: 영화카툰\n27: 영화음악 28: 영화패러디포스터 "
										},
										{
											"key": "country",
											"value": "US",
											"equals": true,
											"description": "검색을 원하는 국가 코드를 의미한다. 국가코드는 대문자만 사용 가능하며,\n분류는 다음과 같다.\n한국 (KR), 일본 (JP), 미국 (US), 홍콩 (HK),\n영국 (GB), 프랑스 (FR), 기타 (ETC) "
										},
										{
											"key": "yearfrom",
											"value": "1990",
											"equals": true,
											"description": "검색을 원하는 영화의 제작년도(최소)를 의미한다.\nyearfrom은 yearto와 함께 사용되어야 한다."
										},
										{
											"key": "yearto",
											"value": "2020",
											"equals": true,
											"description": "검색을 원하는 영화의 제작년도(최대)를 의미한다.\nyearto는 yearfrom과 함께 사용되어야 한다."
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "MovieSearchTest_400badreq_01",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3b52064-77a4-4c37-a356-4feae4e0bf34",
										"type": "text/javascript",
										"exec": [
											"tests[\"response code is 400 Bad Request\"] = responseCode.code === 400;",
											"",
											"var responseJSON;",
											"",
											"try { ",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests['response is valid JSON'] = true;",
											"}",
											"catch (e) { ",
											"    responseJSON = {}; ",
											"    tests['response is valid JSON'] = false;",
											"}",
											"",
											"tests['response json contains errorMessage'] = _.has(responseJSON, 'errorMessage');",
											"tests['response json contains errorCode'] = _.has(responseJSON, 'errorCode');",
											"",
											"//tests[\"start value is not 1\"] = responseJSON.start !== 1;",
											"tests[\"errorMessage checking\"] = _.get(responseJSON, 'errorMessage') === \"Invalid display value (부적절한 display 값입니다.)\";",
											"tests[\"detail errorCode checking\"] = _.get(responseJSON, 'errorCode') === \"SE02\";",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Naver-Client-Id",
										"value": "FCIvOj8oZxPv0fb4Aayy"
									},
									{
										"key": "X-Naver-Client-Secret",
										"value": "u_d9PF1mLV"
									}
								],
								"body": {},
								"url": {
									"raw": "https://openapi.naver.com/v1/search/movie.json?query=terminator&display=ss&start=1&genre=18&country=US&yearfrom=1990&yearto=2020",
									"protocol": "https",
									"host": [
										"openapi",
										"naver",
										"com"
									],
									"path": [
										"v1",
										"search",
										"movie.json"
									],
									"query": [
										{
											"key": "query",
											"value": "terminator",
											"equals": true,
											"description": "검색을 원하는 질의. UTF-8 인코딩이다"
										},
										{
											"key": "display",
											"value": "ss",
											"equals": true,
											"description": "검색 결과 출력 건수를 지정한다. 최대 100까지 가능하다"
										},
										{
											"key": "start",
											"value": "1",
											"equals": true,
											"description": "검색의 시작 위치를 지정할 수 있다. 최대 1000까지 가능하다."
										},
										{
											"key": "genre",
											"value": "18",
											"equals": true,
											"description": "1: 드라마 2: 판타지\n3: 서부 4: 공포\n5: 로맨스 6: 모험\n7: 스릴러 8: 느와르\n9: 컬트 10: 다큐멘터리\n11: 코미디 12: 가족\n13: 미스터리 14: 전쟁\n15: 애니메이션 16: 범죄\n17: 뮤지컬 18: SF\n19: 액션20: 무협\n21: 에로 22: 서스펜스\n23: 서사 24: 블랙코미디\n25: 실험 26: 영화카툰\n27: 영화음악 28: 영화패러디포스터 "
										},
										{
											"key": "country",
											"value": "US",
											"equals": true,
											"description": "검색을 원하는 국가 코드를 의미한다. 국가코드는 대문자만 사용 가능하며,\n분류는 다음과 같다.\n한국 (KR), 일본 (JP), 미국 (US), 홍콩 (HK),\n영국 (GB), 프랑스 (FR), 기타 (ETC) "
										},
										{
											"key": "yearfrom",
											"value": "1990",
											"equals": true,
											"description": "검색을 원하는 영화의 제작년도(최소)를 의미한다.\nyearfrom은 yearto와 함께 사용되어야 한다."
										},
										{
											"key": "yearto",
											"value": "2020",
											"equals": true,
											"description": "검색을 원하는 영화의 제작년도(최대)를 의미한다.\nyearto는 yearfrom과 함께 사용되어야 한다."
										}
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "806485b4-ebae-4066-a562-fe6798d0f9c8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80563d6b-4488-439f-9c6a-2087abb073ae",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "PetStoreCreateUser",
			"description": "This can only be done by the logged in user.",
			"item": [
				{
					"name": "CreateUserTestSuite",
					"description": "",
					"item": [
						{
							"name": "CreateUserTest_200ok_01",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fb778b9-0e16-49dc-94c8-6ee45e23fcd8",
										"type": "text/javascript",
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 321,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}"
								},
								"url": {
									"raw": "http://petstore.swagger.io/v2/user",
									"protocol": "http",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"user"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UpdateUserTestSuite",
					"description": "",
					"item": [
						{
							"name": "UpdateUserTest_200ok_01",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fb778b9-0e16-49dc-94c8-6ee45e23fcd8",
										"type": "text/javascript",
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 321,\r\n  \"username\": \"string\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}"
								},
								"url": {
									"raw": "http://petstore.swagger.io/v2/user",
									"protocol": "http",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"user"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "56bc1089-e967-46e6-a0c8-47410dfe2d6a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "94f54d07-3bcc-4f4c-92eb-eab34c7e43c2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "280ac0eb-1fc2-47de-aeab-1baae3ca3678",
			"key": "VAR_USERNAME",
			"value": "test1234",
			"type": "text"
		},
		{
			"id": "54f44e11-f3e6-4cc8-9e4a-516baa0f7a97",
			"key": "SEARCH_APIPATH",
			"value": "/search/movie.json",
			"type": "text"
		}
	]
}